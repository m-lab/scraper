# This file is a template, to be fleshed out by running:
#    plsync/mlabconfig.py --format=scraper_kubernetes \
#        --template_input=deploy.yml \
#        --template_output=deployment/deploy-{{site}}-{{node}}-{{experiment}}-{{rsync_module}}.yml
#
# The plsync directory and its contents may be found in:
#    https://github.com/m-lab/operator
#
# The template, once filled out, specifies the kubernetes deployment for
# scraper.  The deployment may be deployed with:
#    kubectl apply -f deployment/
# If the deployment fails with the error "namespace does not exist", then run
#    kubectl apply -f namespace.yml
# to create the namespace, and then try the deployment again.
kind: Deployment
apiVersion: extensions/v1beta1
metadata:
  name: {{site_safe}}-{{node_safe}}-{{experiment_safe}}-{{rsync_module_safe}}
  namespace: scraper
  labels:
    application: scraper
spec:
  # Rollbacks are accomplished via the autodeploy meachanism, so no need to keep
  # around old configs and old ReplicaSets. They just use up kubernetes
  # resources and slow everything down.
  revisionHistoryLimit: 0
  replicas: 1
  template:
    metadata:
      annotations:
        prometheus.io/scrape: 'true'
        source: '{{GITHUB_COMMIT}}'
      name: {{site_safe}}-{{node_safe}}-{{experiment_safe}}-{{rsync_module_safe}}
      labels:
        application: scraper
        experiment: {{experiment}}
        machine: {{machine}}
        rsync_module: {{rsync_module}}
    spec:
      volumes:
      - name: volume-{{site_safe}}-{{node_safe}}-{{experiment_safe}}-{{rsync_module_safe}}
        persistentVolumeClaim:
          claimName: claim-{{site_safe}}-{{node_safe}}-{{experiment_safe}}-{{rsync_module_safe}}
      nodeSelector:
        scraper-node: 'true'
      containers:
        - name: scraper
          image: '{{IMAGE_URL}}'
          ports:
          - containerPort: 9090
          env:
            - name: RSYNC_MODULE
              value: {{rsync_module}}
            - name: RSYNC_HOST
              value: {{rsync_host}}
            - name: GCS_BUCKET
              value: '{{GCS_BUCKET}}'
            - name: DATASTORE_NAMESPACE
              value: '{{NAMESPACE}}'
            - name: MAX_UNCOMPRESSED_SIZE
              value: "50000000"
            # Don't put the tarfiles in the same place we rsync, as it can
            # exacerbate disk full errors on the persistent volume.  The
            # tarfiles are small (see above) and any failure in tarfile
            # creation causes a crash, which causes a container restart, which
            # restarts everything with a clean FS (except for the persistent
            # volume).
            - name: TARFILE_DIRECTORY
              value: "/tmp"
          resources:
            requests:
              memory: "200M"
              cpu: "30m"
            limits:
              memory: "400M"
              cpu: "500m"
          volumeMounts:
          - mountPath: /scraper_data
            name: volume-{{site_safe}}-{{node_safe}}-{{experiment_safe}}-{{rsync_module_safe}}
        - image: prom/node-exporter:v0.13.0
          name: fs-exporter
          # Note: only enable the filesystem collector, and ignore system paths.
          args: [ "--collectors.enabled=filesystem",
                  "--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($|/)"]
          ports:
            - containerPort: 9100
          resources:
            requests:
              memory: "10M"
              cpu: "10m"
            limits:
              memory: "10M"
              cpu: "10m"
          volumeMounts:
          - mountPath: /scraper_data
            name: volume-{{site_safe}}-{{node_safe}}-{{experiment_safe}}-{{rsync_module_safe}}
